cat << 'EOF' > Containerfile
FROM fedora:latest

RUN dnf -y install systemd && dnf clean all

RUN systemctl mask systemd-logind.service getty.target console-getty.service

VOLUME [ "/sys/fs/cgroup" ]

CMD ["/usr/sbin/init"]
EOF



podman build -t systemd-enabled-image .


podman run --name systemd-container \
  --privileged \
  --volume /sys/fs/cgroup:/sys/fs/cgroup:ro \
  -d systemd-enabled-image



podman exec -it systemd-container /bin/bash


cat << 'EOF' > /etc/systemd/system/my-service.service
[Unit]
Description=My Custom Example Service
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/bash -c 'while true; do echo "My service is running at $(date)"; sleep 5; done'
Restart=always

[Install]
WantedBy=multi-user.target
EOF



systemctl daemon-reload
systemctl enable my-service
systemctl start my-service


systemctl status my-service

dnf -y install systemd

rpm -q systemd


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


cat << 'EOF' > Containerfile
FROM ubuntu:24.04

# Disable interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install systemd and clean up
RUN apt-get update && \
    apt-get install -y systemd systemd-sysv && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Mask unnecessary services to avoid startup errors
RUN systemctl mask systemd-logind.service getty.target console-getty.service

# Mount cgroups for systemd
VOLUME [ "/sys/fs/cgroup" ]

# Start systemd as PID 1
CMD ["/lib/systemd/systemd"]
EOF



podman build -t ubuntu-systemd-image .


podman run --name ubuntu-systemd-container \
  --privileged \
  --volume /sys/fs/cgroup:/sys/fs/cgroup:ro \
  -d ubuntu-systemd-image


podman exec -it ubuntu-systemd-container /bin/bash

systemctl list-units --type=service

ps -p 1 -o pid,comm


systemctl list-units --type=service | head

busctl list


apt-get update
apt-get install -y dbus dbus-user-session dbus-x11 libdbus-1-3

systemctl daemon-reload
systemctl enable dbus
systemctl start dbus

systemctl status dbus

ls -l /run/dbus/system_bus_socket

eval $(dbus-launch --sh-syntax)

echo $DBUS_SESSION_BUS_ADDRESS





